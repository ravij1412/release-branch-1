with ctes as (
select max(sal)  as ss from mldev.emp  group by deptno    2850
5000
3000
)
select lag(sal) over(order by sal) from ctes

select sal ,lag(sal) over (order by sal) from mldev.emp e

with ctes as (
select sal ,lag(sal) over(order by sal) as rr  from mldev.emp )
select ctes.sal,ctes.sal-ctes.rr from ctes

with ctes as (
select sal ,lag(sal) over(order by sal) as rr  from mldev.emp ),
ctes1 as (select max(sal) ms from mldev.emp 
)
select ctes1.ms-ctes.rr from ctes,ctes1

with ctes as (
select deptno, max(sal)  as ss from mldev.emp  group by deptno   
),
ctes1 as (
select deptno, ss,  lag(ss, 1) over(order by ss) as tt from ctes )
select  c1.deptno, c2.ss, c2.tt, c2.ss - c2.tt from ctes c1, ctes1  c2 where c1.deptno = c2.deptno;


----- query ------
select max(sal) ,ename,to_char(hiredate,'month')  as mm from mldev.emp
group  by  to_char(hiredate,'month') ,ename
with ctes as ()
select max(sal) from mldev.emp
group  by  to_char(hiredate,'month') )
select ename ,ctes.max(sal)from mldev.emp e ,ctes
with ct as(
select max(sal) as msal from mldev.emp group by deptno)

select sal,deptno,lag(sal) over(order by sal) - lead(sal) over(order by sal) from mldev.emp group by deptno,sal

 select max(sal),lag(sal) over(order by (max(sal) )) -lead(sal) over (order by max(sal) ) from mldev.emp group by max(sal);
 
 with cte as (
 select *, lead(sal, 1) over(partition by deptno order by sal desc) led from mldev.emp (
 select *, dense_rank() over(partition by deptno order by sal desc) rnum from mldev.emp)sub1 where rnum <= 2)
 select *, sal-led tt from cte where led is not null;
 
 -- max salary 
 select  yearr, ename, max(sal) from(
 select * , extract('year' from hiredate) yearr from mldev.emp) sub1 group by 1, 2;  WARD	1250
TURNER	1500
JONES	2975
CLARK	2450
MILLER	1300
KING	5000
BLAKE	2850
 ---select * from 
 select max(sal) ,ename,to_char(hiredate,'month') from mldev.emp
group  by  to_char(hiredate,'month') ,ename;
-select---

select * from(
select *, dense_rank() over(partition by yearr order by sal desc) rnum from(
select * , extract('year' from hiredate) yearr from mldev.emp)sub1
)sub2 where rnum = 1 ;
 
create table mldev.tablea (id1 varchar(10));
create table mldev.tableb (id2 varchar(10));

insert into mldev.tableb values (0);
insert into mldev.tableb values (1);
insert into mldev.tableb values (2);
insert into mldev.tableb values ('null');
insert into mldev.tableb values ('null');
tablea     tableb    join
0            0      0 0
1            1      1 1 
null         2      null null
             null   null null
            
             null     
  top higest sal in each department and diff sal 
  select * from mldev.emp
  select max(sal) from mldev.emp group by deptno

 ---------------plsql--------------
 CREATE OR REPLACE FUNCTION fn_orderitemsum(f_product_name VARCHAR, f_order_id INT)
    RETURNS DECIMAL
    LANGUAGE plpgsql
AS
$$
DECLARE
    fv_name DECIMAL;  -- Declare the return variable of type DECIMAL
BEGIN
    -- Calculate the sum of quantity * unit_price
    SELECT SUM(quantity * unit_price) 
    INTO fv_name
    FROM del.order_items
    WHERE product_name = f_product_name
      AND order_id = f_order_id;

    -- Return the calculated value
    RETURN fv_name;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Return 0 if no matching rows are found (PostgreSQL will not raise NO_DATA_FOUND automatically)
        RETURN 0;
    WHEN OTHERS THEN
        -- Handle other unexpected exceptions
        RETURN NULL;
END;
$$;

call fn_orderitemsum()
select 
---------------------
CREATE TABLE DEL.accounts (
user_id integer PRIMARY KEY,
firstname VARCHAR ( 50 ) NOT NULL,
lastname VARCHAR ( 50 ) NOT NULL,
email VARCHAR ( 255 ) UNIQUE NOT NULL
);

create or replace  procedure ADDACCOUNT(ID INT,FIRSTNAME VARCHAR(12),LAST_NAME VARCHAR(12),EMAIL VARCHAR(12))
language PLPGSQL
as $$
begin 
	insert into DEL.ACCOUNTS VALUES(ID,FIRSTNAME,LAST_NAME,EMAIL);
end
$$;

call ADDACCOUNT(1,'RAM','A','RAMA@GMAIL.COM')

CREATE TABLE employees1 (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    age INT
);

CREATE PROCEDURE add_employee1(emp_name VARCHAR, emp_age INT)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO employees1 (name, age) VALUES (emp_name, emp_age);
END;
$$;
CALL add_employee1('John Doe', 25);
select * from employees1
select * from del.orders  where  customer_id = 385 and  order_id =225275   501.21
create or replace procedure ADD_ORDER (C_ID INT)
language PLPGSQL
as $$
declare 
T_AMOUNT DECIMAL;
begin 
	select (TOTAL_AMOUNT+1) into T_AMOUNT from del.orders where CUSTOMER_ID =C_ID;
RAISE NOTICE 'Total Price for ORDER_ITEM_ID % is: %', T_AMOUNT,C_ID;
END;
$$;
call ADD_ORDER(385),5385=156.22

create or replace procedure ADD_ORDER (C_ID INT,O_ID INT)
language PLPGSQL
as $$
begin 
UPDATE del.orders
SET total_amount = total_amount-1  WHERE CUSTOMER_ID =C_ID AND order_id =O_ID;
END;
$$;
call ADD_ORDER(385,5385)

select * from del.orders
select QUANTITY*UNIT_PRICE from del.order_items where product_name ='PRODUCT 1'
  select * from del.aa
select ID +1 from del.aa where STATE ='TEXAS'
SELECT QUANTITY * UNIT_PRICE AS total_price
FROM del.order_items
WHERE product_name = 'PRODUCT 1';
select * from del.orders
225275


CREATE OR REPLACE PROCEDURE ADD_ORDER(C_ID INT,O_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Update the total amount for the customer (subtracting 1)
    UPDATE del.orders
    SET TOTAL_AMOUNT = TOTAL_AMOUNT - 1
    WHERE CUSTOMER_ID = C_ID AND ORDER_ID =O_ID;

    -- Raise a notice to show the result of the operation
   -- RAISE NOTICE 'Total Amount for Customer ID % updated. New value: %', C_ID,
   -- (SELECT TOTAL_AMOUNT FROM del.orders WHERE CUSTOMER_ID = C_ID AND  order_id =O_ID);
END;
$$;
CALL ADD_ORDER(385,225275
);  -- Replace 123 with the actual CUSTOMER_ID you want to update.
UPDATE del.orders
    SET TOTAL_AMOUNT = TOTAL_AMOUNT - 1
    WHERE CUSTOMER_ID = 385;



select * from del.order_items
---------fucntions-------------------

CREATE OR REPLACE FUNCTION fn_orderitemsum(f_product_name VARCHAR, f_order_id INT)
    RETURN DECIMAL;
    LANGUAGE plpgsql
AS
$$
DECLARE
    fv_name DECIMAL;  
BEGIN
   
    SELECT SUM(quantity * unit_price) 
    INTO fv_name
    FROM del.order_items
    WHERE product_name = f_product_name
      AND order_id = f_order_id;

    -- Return the calculated value
    RETURN fv_name; 
---if fn_orderitemsum ='null' theN
	---RAISE NOTICE 'your function is not working: %', total_price;
---END IF;

EXCEPTION
    WHEN OTHERS THEN
        -- Handle any other unexpected exceptions
        RETURN NULL;
END;
$$;

END;
$$;

IF fn_orderitemsum IS null then
	return;
end if;

select * from del.order_items where product_name ='product 1' and order_id =4902073
select  fn_orderitemsum('product 2',4902073)

SELECT fn_orderitemsum('product 2', ) AS order_total;

create table EROR (ID SERIAL ,)
select 


DO $$
DECLARE
    user_email VARCHAR;
BEGIN
    IF FN_ORDERITEMSUM IS NULL THEN
        RAISE NOTICE 'Email is NULL';
    ELSE
        RAISE NOTICE 'Email is not NULL';
    END IF;
END $$;

-------------------------------------------
---functions----

DROP FUNCTION fn_order_total(integer) 
-- Step 3: Create the function to calculate total for an order
CREATE OR REPLACE FUNCTION fn_order_total(p_order_id INT)
RETURNS int 
LANGUAGE plpgsql
AS
$$
DECLARE
    total int;
BEGIN
    
    SELECT SUM(quantity * unit_price)
    INTO total
    FROM order_item
    WHERE order_id = p_order_id;

    
   
    if total is null then 
    	raise notice 'no order found on this id %', p_order_id; 
    	--return;
    end if;
    
   return total;
END;
$$;

select *  from fn_order_total(1);



------------------------------------------------------------------

do $$
declare 
begin
if public.fn_order_total(1) > 0 then 
	raise notice 'you r code is not working ';
	return ;
end if;
end $$;

---------
CREATE OR REPLACE PROCEDURE public.order_total1(IN t_id integer)
 LANGUAGE plpgsql
AS $procedure$
declare
v_id int;
begin

raise notice 'start';
raise notice 't_id value %', t_id;
	select sum(total_amount) into v_id  from del.orders where order_id= t_id;
raise notice  'some value %',v_id;

insert into  del.ids  values (v_id);


end;
$procedure$
;
with cte as (
select p.product_name , p.category,s.*   from del.products p join del.sales s on p.product_id=s.product_id)
, cte2 as (
select * from cte  c join del.sales_regions sr on c.sale_id=sr.sale_id),
cte3 as (
select * from cte2  c1 join del.regions r on r.region_id = c1.region_id)
--select region_name, sum(sale_amount), sum(quantity_sold) from cte3;
select region_name, category, product_name, sum(quantity_sold),sum(sale_amount) from cte3 
--where sale_date>='2024-10-01' and sale_date<'2025-01-01'  
group by
1,2, 3